const e=JSON.parse('{"key":"v-b7e0b20a","path":"/notes/concurrent/chap-one.html","title":"第一章 Java 并发编程的基础","lang":"zh-CN","frontmatter":{"title":"第一章 Java 并发编程的基础","order":1,"isOriginal":true,"category":["笔记"],"tag":["并发编程"],"comment":true,"description":"线程简介 什么是线程 现代操作系统在运行一个程序时，会为其创建一个进程。例如，启动一个 Java 程序，操作系统就会创建一个 Java 进程。线程也叫轻量级进程（light Weight Process），是现代操作系统调度的最小单元。在一个进程里可以创建多个线程，处理器在这些线程上高速切换，让使用者感觉到这些线程是在同时执行。 为什么要使用多线程 充分利用多核处理器和多个 CPU 使用多线程技术，将计算逻辑分配到多个处理器核心上，就会显著减少程序的处理时间，并且随着更多处理器核心的加入而变得更有效率。","head":[["meta",{"property":"og:url","content":"https://cpgege.gitee.io/notes/concurrent/chap-one.html"}],["meta",{"property":"og:site_name","content":"BroNotes(学长笔记)"}],["meta",{"property":"og:title","content":"第一章 Java 并发编程的基础"}],["meta",{"property":"og:description","content":"线程简介 什么是线程 现代操作系统在运行一个程序时，会为其创建一个进程。例如，启动一个 Java 程序，操作系统就会创建一个 Java 进程。线程也叫轻量级进程（light Weight Process），是现代操作系统调度的最小单元。在一个进程里可以创建多个线程，处理器在这些线程上高速切换，让使用者感觉到这些线程是在同时执行。 为什么要使用多线程 充分利用多核处理器和多个 CPU 使用多线程技术，将计算逻辑分配到多个处理器核心上，就会显著减少程序的处理时间，并且随着更多处理器核心的加入而变得更有效率。"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:image","content":"https://cpgege.gitee.io/"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-01-20T10:59:26.000Z"}],["meta",{"name":"twitter:card","content":"summary_large_image"}],["meta",{"name":"twitter:image:alt","content":"第一章 Java 并发编程的基础"}],["meta",{"property":"article:author","content":"piaolingluo"}],["meta",{"property":"article:tag","content":"并发编程"}],["meta",{"property":"article:modified_time","content":"2024-01-20T10:59:26.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"第一章 Java 并发编程的基础\\",\\"image\\":[\\"https://cpgege.gitee.io/\\"],\\"dateModified\\":\\"2024-01-20T10:59:26.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"piaolingluo\\",\\"url\\":\\"\\"}]}"]]},"headers":[{"level":2,"title":"线程简介","slug":"线程简介","link":"#线程简介","children":[{"level":3,"title":"什么是线程","slug":"什么是线程","link":"#什么是线程","children":[]},{"level":3,"title":"为什么要使用多线程","slug":"为什么要使用多线程","link":"#为什么要使用多线程","children":[]},{"level":3,"title":"线程的状态","slug":"线程的状态","link":"#线程的状态","children":[]},{"level":3,"title":"Daemon 线程","slug":"daemon-线程","link":"#daemon-线程","children":[]}]},{"level":2,"title":"线程间通信","slug":"线程间通信","link":"#线程间通信","children":[{"level":3,"title":"线程访问同步块的过程","slug":"线程访问同步块的过程","link":"#线程访问同步块的过程","children":[]},{"level":3,"title":"等待 / 通知机制","slug":"等待-通知机制","link":"#等待-通知机制","children":[]},{"level":3,"title":"等待 / 通知的经典范式","slug":"等待-通知的经典范式","link":"#等待-通知的经典范式","children":[]},{"level":3,"title":"thread.join() 的使用","slug":"thread-join-的使用","link":"#thread-join-的使用","children":[]}]}],"git":{"createdTime":1695653626000,"updatedTime":1705748366000,"contributors":[{"name":"gechenpeng","email":"731269319@qq.com","commits":7}]},"readingTime":{"minutes":5.12,"words":1535},"filePathRelative":"notes/concurrent/chap-one.md","localizedDate":"2023年9月25日","excerpt":"<h2> 线程简介</h2>\\n<h3> 什么是线程</h3>\\n<p>现代操作系统在运行一个程序时，会为其创建一个进程。例如，启动一个 Java 程序，操作系统就会创建一个 Java 进程。线程也叫轻量级进程（<code>light Weight Process</code>），是现代操作系统调度的最小单元。在一个进程里可以创建多个线程，处理器在这些线程上高速切换，让使用者感觉到这些线程是在同时执行。</p>\\n<h3> 为什么要使用多线程</h3>\\n<ul>\\n<li><strong>充分利用多核处理器和多个 CPU</strong></li>\\n</ul>\\n<p>使用多线程技术，将计算逻辑分配到多个处理器核心上，就会显著减少程序的处理时间，并且随着更多处理器核心的加入而变得更有效率。</p>","autoDesc":true}');export{e as data};
