import{_ as i}from"./plugin-vue_export-helper-c27b6911.js";import{r as t,o as l,c,d as e,e as a,b as n,w as g,f as s}from"./app-6011d89b.js";const d="/assets/利用可达性分析算法判定对象是否可回收-b235dad8.png",p="/assets/标记-清除算法示意图-69231ebb.png",h="/assets/标记-复制算法示意图-633032c4.png",u="/assets/Appel式回收示意图-732dcf56.png",m="/assets/标记-整理算法示意图-40e1ce4b.png",f="/assets/系统延迟和吞吐量的关系-4aa72905.jpeg",x="/assets/HotSpot虚拟机的垃圾收集器-62c1643b.png",S="/assets/经典垃圾收集器对比-b65165fd.png",v="/assets/Serial-and-Serial-Old收集器运行示意图-4eff1e99.png",b="/assets/ParNew-and-Serial-Old收集器运行示意图-301a0368.png",_="/assets/Parallel-Scavenge-and-Parallel-Old收集器运行示意图-1358ae67.png",G="/assets/Concurrent-Mark-Sweep收集器运行示意图-b1b7aa2e.png",C="/assets/G1收集器Region分区示意图-a097bf63.png",M="/assets/G1收集器运行示意图-891f974f.png",y={},k=s('<h2 id="判断对象是否存活" tabindex="-1"><a class="header-anchor" href="#判断对象是否存活" aria-hidden="true">#</a> 判断对象是否存活</h2><h3 id="可达性分析算法" tabindex="-1"><a class="header-anchor" href="#可达性分析算法" aria-hidden="true">#</a> 可达性分析算法</h3><p><strong>Java 是通过可达性分析算法来判定对象是否存活的</strong>。通过一系列称为 <code>GC Roots</code> 的<strong>根对象</strong>作为起始节点集，从这些节点开始，根据引用关系向下搜索，搜索过程所走过的路径称为“引用链”（<code>Reference Chain</code>），<strong>如果某个对象到 <code>GC Roots</code> 间没有任何引用链相连，则证明此对象是不可能再被使用的</strong>。</p><figure><img src="'+d+'" alt="利用可达性分析算法判定对象是否可回收" tabindex="0" loading="lazy"><figcaption>利用可达性分析算法判定对象是否可回收</figcaption></figure><div class="hint-container tip"><p class="hint-container-title">哪些对象可以作为 GC Roots</p><ul><li>虚拟机栈（栈帧中的本地变量表）中引用的对象</li><li>本地方法栈中 JNI（即通常所说的 Native 方法）引用的对象</li><li>类静态属性引用的对象</li><li>常量引用的对象</li><li>被同步锁（<code>synchronized</code> 关键字）持有的对象</li></ul></div><h2 id="分代收集理论" tabindex="-1"><a class="header-anchor" href="#分代收集理论" aria-hidden="true">#</a> 分代收集理论</h2><h3 id="分代假说" tabindex="-1"><a class="header-anchor" href="#分代假说" aria-hidden="true">#</a> 分代假说</h3><ol><li>弱分代假说（Weak Generational Hypothesis）：绝大多数对象都是朝生夕灭的。</li><li>强分代假说（Strong Generational Hypothesis）：熬过越多次垃圾收集过程的对象就越难以消亡。</li><li>跨代引用假说（Intergenerational Reference Hypothesis）：跨代引用相对于同代引用来说仅占极少数。</li></ol><div class="hint-container info"><p class="hint-container-title">分代收集名词定义</p><ul><li>部分收集（<code>Partial GC</code>）：指目标不是完整收集整个 Java 堆的垃圾收集。 <ul><li>新生代收集（<code>Minor GC</code> / <code>Young GC</code>）：指目标只是新生代的垃圾收集。</li><li>老年代收集（<code>Major GC</code> / <code>Old GC</code>）：指目标只是老年代的垃圾收集。目前只有 CMS 收集器会有单独收集老年代的行为。</li><li>混合收集（<code>Mixed GC</code>）：指目标是收集整个新生代以及部分老年代的垃圾收集。目前只有 G1 收集器会有这种行为。</li></ul></li><li>整堆收集（<code>Full GC</code>）：收集整个 Java 堆和方法区的垃圾收集。</li></ul></div><h2 id="垃圾收集算法" tabindex="-1"><a class="header-anchor" href="#垃圾收集算法" aria-hidden="true">#</a> 垃圾收集算法</h2><h3 id="标记-清除算法" tabindex="-1"><a class="header-anchor" href="#标记-清除算法" aria-hidden="true">#</a> 标记-清除算法</h3><p>标记-清除（<code>Mark-Sweep</code>）算法分为“标记”和“清除”两个阶段：首先标记出所有需要回收的对象，在标记完成后，<strong>统一回收掉所有被标记的对象</strong>，也可以反过来，标记存活的对象，统一回收所有未被标记的对象。</p><figure><img src="'+p+'" alt="标记-清除算法示意图" tabindex="0" loading="lazy"><figcaption>标记-清除算法示意图</figcaption></figure><p>主要<strong>缺点</strong>有两个：</p><ol><li><strong>执行效率不稳定</strong>，如果 Java 堆中包含大量对象，而且其中大部分是需要被回收的，这时必须进行大量标记和清除的动作，导致标记和清除两个过程的执行效率都随对象数量增长而降低;</li><li><strong>内存空间的碎片化问题</strong>，标记、清除之后会产生大量不连续的内存碎片，空间碎片太多可能会导致当以后在程序运行过程中需要分配较大对象时<strong>无法找到足够的连续内存</strong>而不得不<strong>提前触发另一次垃圾收集</strong>动作。</li></ol><div class="hint-container warning"><p class="hint-container-title">新生代不适合用标记-清除算法</p><p>新生代大多数对象都是“朝生夕灭”的，使用标记-清除算法时，需要进行大量标记和清除的动作，<strong>效率低</strong>。</p></div><h3 id="标记-复制算法" tabindex="-1"><a class="header-anchor" href="#标记-复制算法" aria-hidden="true">#</a> 标记-复制算法</h3><p>将可用内存按容量划分为大小相等的两块，每次只使用其中的一块。当这一块的内存用完了，就<strong>将还存活着的对象复制到另外一块上面</strong>，然后再把已使用过的内存空间一次性清理掉。</p><figure><img src="'+h+'" alt="标记-复制算法示意图" tabindex="0" loading="lazy"><figcaption>标记-复制算法示意图</figcaption></figure>',19),P=e("strong",null,"优点",-1),R=e("strong",null,"不会产生内存空间碎片",-1),w=e("strong",null,"高效",-1),z=s('<p><strong>缺点</strong>：将可用内存缩小为原来的一半，<strong>空间浪费严重</strong>。</p><div class="hint-container tip"><p class="hint-container-title">新生代适合用复制算法</p><p>标记-复制算法特别适合多数对象可回收的情况，比如新生代的回收，因为需要复制的对象少，<strong>效率高</strong>。</p><p>为了减少空间浪费，新生代可以使用改良版的 Appel 式回收。</p></div><div class="hint-container warning"><p class="hint-container-title">老年代不适合用复制算法</p><blockquote><p>标记-复制算法在对象存活率较高时就要进行较多的复制操作，效率将会降低。更关键的是，如果不想浪费 50% 的空间，就需要有额外的空间进行分配担保，以应对被使用的内存中所有对象都 100% 存活的极端情况，所以在老年代一般不能直接选用这种算法。</p></blockquote><p>总结下来有两点：</p><ol><li>老年代对象存活率较高，使用复制算法需要进行较多的复制操作，<strong>效率低</strong>。</li><li>空间浪费严重，就算使用“Appel 式回收”，也需要有额外的空间进行分配担保，而老年代没有分配担保。</li></ol></div><h3 id="复制算法的改良-—-appel-式回收" tabindex="-1"><a class="header-anchor" href="#复制算法的改良-—-appel-式回收" aria-hidden="true">#</a> 复制算法的改良 — Appel 式回收</h3><p>Appel 式回收的具体做法是把新生代分为一块较大的 Eden 空间和两块较小的 Survivor 空间，每次分配内存只使用 Eden 和其中一块 Survivor。发生垃圾搜集时，<strong>将 Eden 和 Survivor 中仍然存活的对象一次性复制到另外一块 Survivor 空间上</strong>，然后直接清理掉 Eden 和已用过的那块 Survivor 空间。</p><figure><img src="'+u+'" alt="Appel 式回收示意图" tabindex="0" loading="lazy"><figcaption>Appel 式回收示意图</figcaption></figure><p>当 Survivor 空间不足以容纳一次 <code>Minor GC</code> 之后存活的对象时，就需要依赖其他内存区域（实际上大多就是老年代）进行<strong>分配担保</strong>（<code>Handle Promotion</code>）。</p><h3 id="标记-整理算法" tabindex="-1"><a class="header-anchor" href="#标记-整理算法" aria-hidden="true">#</a> 标记-整理算法</h3><p>标记-整理（<code>Mark-Compact</code>）算法，其中的标记过程仍然与标记-清除算法一样，但后续步骤不是直接对可回收对象进行清理，而是<strong>让所有存活的对象都向内存空间一端移动</strong>，然后直接清理掉边界以外的内存。</p><figure><img src="'+m+'" alt="标记-整理算法示意图" tabindex="0" loading="lazy"><figcaption>标记-整理算法示意图</figcaption></figure><div class="hint-container info"><p class="hint-container-title">“标记-清除算法”与“标记-整理算法”的异同</p><p><strong>相同点</strong>：<code>标记-清除算法</code>与<code>标记-整理算法</code>都适用于<strong>老年代</strong>垃圾回收。</p><p><strong>不同点</strong>：</p><ul><li><code>标记-清除算法</code>是一种<strong>非移动式</strong>的回收算法，因此产生的“内存空间碎片化”问题会导致<strong>内存分配和访问过程变得更为复杂</strong>，最终会影响到用户程序的吞吐量。但是垃圾收集时，<strong>停顿时间会更短</strong>，像关注延迟的 CMS 收集器就是基于<code>标记-清除算法</code>的。</li><li><code>标记-整理算法</code>是<strong>移动式</strong>的，移动存活对象并更新所有引用这些对象的地方，工程量巨大，而且必须暂停用户程序，使得<strong>内存回收更为复杂</strong>。但是规整的内存空间使得<strong>内存分配和访问更容易</strong>，像关注吞吐量的 <code>Parallel Old</code> 收集器就是基于<code>标记-整理算法</code>的。</li></ul><figure><img src="'+f+'" alt="" height="200" tabindex="0" loading="lazy"><figcaption></figcaption></figure></div><h2 id="经典垃圾收集器" tabindex="-1"><a class="header-anchor" href="#经典垃圾收集器" aria-hidden="true">#</a> 经典垃圾收集器</h2><figure><img src="'+x+'" alt="HotSpot虚拟机的垃圾收集器" tabindex="0" loading="lazy"><figcaption>HotSpot虚拟机的垃圾收集器</figcaption></figure><figure><img src="'+S+'" alt="经典垃圾收集器对比" tabindex="0" loading="lazy"><figcaption>经典垃圾收集器对比</figcaption></figure><h3 id="serial-收集器" tabindex="-1"><a class="header-anchor" href="#serial-收集器" aria-hidden="true">#</a> Serial 收集器</h3><p>Serial 收集器是一个<strong>单线程</strong>工作的<strong>新生代</strong>收集器，但它的“单线程”的意义并不仅仅是说明它只会使用一个处理器或一条收集线程去完成垃圾收集工作，更重要的是强调在它<strong>进行垃圾收集时，必须暂停其他所有工作线程（<code>Stop The World</code>），直到它收集结束</strong>。</p><figure><img src="'+v+'" alt="Serial/Serial Old收集器运行示意图" tabindex="0" loading="lazy"><figcaption>Serial/Serial Old收集器运行示意图</figcaption></figure><p>Serial 收集器对于运行在<strong>客户端模式</strong>下的虚拟机来说是一个很好的选择。</p><h3 id="serial-old-收集器" tabindex="-1"><a class="header-anchor" href="#serial-old-收集器" aria-hidden="true">#</a> Serial Old 收集器</h3><p><code>Serial Old</code> 是 Serial 收集器的<strong>老年代</strong>版本，它同样是一个<strong>单线程</strong>收集器，使用<strong>标记-整理算法</strong>。这个收集器的主要意义也是供客户端模式下的 HotSpot 虚拟机使用。如果在服务端模式下，它也可能有两种用途：一种是在 <strong>JDK 5 以及之前的版本中与 <code>Parallel Scavenge</code> 收集器搭配使用</strong>，另外一种就是<strong>作为 CMS 收集器发生失败时的后备预案</strong>，在并发收集发生 <code>Concurrent Mode Failure</code> 时使用。</p><h3 id="parnew-收集器" tabindex="-1"><a class="header-anchor" href="#parnew-收集器" aria-hidden="true">#</a> ParNew 收集器</h3><p>ParNew 收集器实质上是 <strong>Serial 收集器的多线程并行版本</strong>，除了同时使用多条线程进行垃圾收集之外，其余的行为包括 Serial 收集器可用的所有控制参数、收集算法、<code>Stop The World</code>、对象分配规则、回收策略等都与 Serial 收集器完全一致。</p><figure><img src="'+b+'" alt="ParNew/Serial Old收集器运行示意图" tabindex="0" loading="lazy"><figcaption>ParNew/Serial Old收集器运行示意图</figcaption></figure><p>ParNew 是 <strong>JDK 7 之前的遗留系统中首选的新生代收集器，能与 CMS 收集器配合工作</strong>。</p><p>ParNew 可以说是 HotSpot 虚拟机中<strong>第一款退出历史舞台的垃圾收集器</strong>。</p><h3 id="parallel-scavenge-收集器" tabindex="-1"><a class="header-anchor" href="#parallel-scavenge-收集器" aria-hidden="true">#</a> Parallel Scavenge 收集器</h3><p><code>Parallel Scavenge</code> 收集器也是一款<strong>新生代</strong>收集器，它同样是基于<strong>标记-复制</strong>算法实现的收集器，也是能够<strong>并行</strong>收集的多线程收集器。</p><figure><img src="'+_+'" alt="Parallel Scavenge/Parallel Old收集器运行示意图" tabindex="0" loading="lazy"><figcaption>Parallel Scavenge/Parallel Old收集器运行示意图</figcaption></figure><p>从表面上看和 ParNew 非常相似，但它的关注点与其他收集器不同，CMS 等收集器的关注点是尽可能地缩短垃圾收集时用户线程的停顿时间，<code>Parallel Scavenge</code> 收集器的目标则是<strong>达到一个可控制的吞吐量</strong>（Throughput）。</p>',29),O=e("p",{class:"katex-block"},[e("span",{class:"katex-display"},[e("span",{class:"katex"},[e("span",{class:"katex-mathml"},[e("math",{xmlns:"http://www.w3.org/1998/Math/MathML",display:"block"},[e("semantics",null,[e("mrow",null,[e("mtext",null,"吞吐量"),e("mo",null,"="),e("mfrac",null,[e("mtext",null,"运行用户代码时间"),e("mrow",null,[e("mtext",null,"运行用户代码时间"),e("mo",null,"+"),e("mtext",null,"运行垃圾收集时间")])])]),e("annotation",{encoding:"application/x-tex"}," \\text{吞吐量} = \\frac{\\text{运行用户代码时间}}{\\text{运行用户代码时间}+\\text{运行垃圾收集时间}} ")])])]),e("span",{class:"katex-html","aria-hidden":"true"},[e("span",{class:"base"},[e("span",{class:"strut",style:{height:"0.6833em"}}),e("span",{class:"mord text"},[e("span",{class:"mord cjk_fallback"},"吞吐量")]),e("span",{class:"mspace",style:{"margin-right":"0.2778em"}}),e("span",{class:"mrel"},"="),e("span",{class:"mspace",style:{"margin-right":"0.2778em"}})]),e("span",{class:"base"},[e("span",{class:"strut",style:{height:"2.1297em","vertical-align":"-0.7693em"}}),e("span",{class:"mord"},[e("span",{class:"mopen nulldelimiter"}),e("span",{class:"mfrac"},[e("span",{class:"vlist-t vlist-t2"},[e("span",{class:"vlist-r"},[e("span",{class:"vlist",style:{height:"1.3603em"}},[e("span",{style:{top:"-2.314em"}},[e("span",{class:"pstrut",style:{height:"3em"}}),e("span",{class:"mord"},[e("span",{class:"mord text"},[e("span",{class:"mord cjk_fallback"},"运行用户代码时间")]),e("span",{class:"mspace",style:{"margin-right":"0.2222em"}}),e("span",{class:"mbin"},"+"),e("span",{class:"mspace",style:{"margin-right":"0.2222em"}}),e("span",{class:"mord text"},[e("span",{class:"mord cjk_fallback"},"运行垃圾收集时间")])])]),e("span",{style:{top:"-3.23em"}},[e("span",{class:"pstrut",style:{height:"3em"}}),e("span",{class:"frac-line",style:{"border-bottom-width":"0.04em"}})]),e("span",{style:{top:"-3.677em"}},[e("span",{class:"pstrut",style:{height:"3em"}}),e("span",{class:"mord"},[e("span",{class:"mord text"},[e("span",{class:"mord cjk_fallback"},"运行用户代码时间")])])])]),e("span",{class:"vlist-s"},"​")]),e("span",{class:"vlist-r"},[e("span",{class:"vlist",style:{height:"0.7693em"}},[e("span")])])])]),e("span",{class:"mclose nulldelimiter"})])])])])])],-1),N=e("p",null,"停顿时间越短，越能提高响应速度，从而提升用户体验；而高吞吐量则可以高效地完成运算任务，适合在后台运算而不需要太多交互的分析任务。",-1),T=e("div",{class:"hint-container tip"},[e("p",{class:"hint-container-title"},"Parallel Scavenge 收集器提供了两个参数用于精确控制吞吐量"),e("ul",null,[e("li",null,[e("code",null,"-XX:MaxGCPauseMillis"),a(" 参数允许的值是一个大于 0 的毫秒数，收集器将尽力保证内存回收花费的时间不超过用户设定值。")]),e("li",null,[e("code",null,"-XX:GCTimeRatio"),a(" 参数的值则应当是一个大于 0 小于 100 的整数，其值 "),e("span",{class:"katex"},[e("span",{class:"katex-mathml"},[e("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[e("semantics",null,[e("mrow",null,[e("mo",null,"="),e("mfrac",null,[e("mtext",null,"用户代码时间"),e("mtext",null,"垃圾收集时间")])]),e("annotation",{encoding:"application/x-tex"},"= \\frac{\\text{用户代码时间}}{\\text{垃圾收集时间}}")])])]),e("span",{class:"katex-html","aria-hidden":"true"},[e("span",{class:"base"},[e("span",{class:"strut",style:{height:"0.3669em"}}),e("span",{class:"mrel"},"="),e("span",{class:"mspace",style:{"margin-right":"0.2778em"}})]),e("span",{class:"base"},[e("span",{class:"strut",style:{height:"1.2173em","vertical-align":"-0.345em"}}),e("span",{class:"mord"},[e("span",{class:"mopen nulldelimiter"}),e("span",{class:"mfrac"},[e("span",{class:"vlist-t vlist-t2"},[e("span",{class:"vlist-r"},[e("span",{class:"vlist",style:{height:"0.8723em"}},[e("span",{style:{top:"-2.655em"}},[e("span",{class:"pstrut",style:{height:"3em"}}),e("span",{class:"sizing reset-size6 size3 mtight"},[e("span",{class:"mord mtight"},[e("span",{class:"mord text mtight"},[e("span",{class:"mord cjk_fallback mtight"},"垃圾收集时间")])])])]),e("span",{style:{top:"-3.23em"}},[e("span",{class:"pstrut",style:{height:"3em"}}),e("span",{class:"frac-line",style:{"border-bottom-width":"0.04em"}})]),e("span",{style:{top:"-3.394em"}},[e("span",{class:"pstrut",style:{height:"3em"}}),e("span",{class:"sizing reset-size6 size3 mtight"},[e("span",{class:"mord mtight"},[e("span",{class:"mord text mtight"},[e("span",{class:"mord cjk_fallback mtight"},"用户代码时间")])])])])]),e("span",{class:"vlist-s"},"​")]),e("span",{class:"vlist-r"},[e("span",{class:"vlist",style:{height:"0.345em"}},[e("span")])])])]),e("span",{class:"mclose nulldelimiter"})])])])]),a("。")])])],-1),H=s('<h3 id="parallel-old-收集器" tabindex="-1"><a class="header-anchor" href="#parallel-old-收集器" aria-hidden="true">#</a> Parallel Old 收集器</h3><p><code>Parallel Old</code> 是 <code>Parallel Scavenge</code> 收集器的<strong>老年代</strong>版本，支持多线程<strong>并行</strong>收集，基于<strong>标记-整理算法</strong>实现。</p><p>在<strong>注重吞吐量</strong>或者处理器资源较为稀缺的场合，都可以优先考虑 <code>Parallel Scavenge</code> 加 <code>Parallel Old</code> 收集器这个组合。</p><h3 id="cms-收集器" tabindex="-1"><a class="header-anchor" href="#cms-收集器" aria-hidden="true">#</a> CMS 收集器</h3><p>CMS（<code>Concurrent Mark Sweep</code>）收集器是一种以获取<strong>最短回收停顿时间</strong>为目标的收集器，基于<strong>标记-清除算法</strong>实现的。它的运作过程相对于前面几种收集器来说要更复杂一些，整个过程分为四个步骤，包括：</p><ul><li><p><strong>初始标记</strong>（<code>CMS initial mark</code>）：初始标记仅仅只是标记一下 <code>GC Roots</code> 能直接关联到的对象，速度很快。这个阶段<strong>需要停顿线程（STW）</strong>。</p></li><li><p><strong>并发标记</strong>（<code>CMS concurrent mark</code>）：并发标记阶段就是从 <code>GC Roots</code> 的直接关联对象开始遍历整个对象图的过程，这个过程耗时较长但是不需要停顿用户线程，<strong>可以与垃圾收集线程一起并发运行</strong>。</p></li><li><p><strong>重新标记</strong>（<code>CMS remark</code>）：重新标记阶段则是为了修正并发标记期间，因用户程序继续运作而导致标记产生变动的那一部分对象的标记记录，这个阶段也<strong>需要停顿线程（STW）</strong>，时间通常会比初始标记阶段稍长一些，但也远比并发标记阶段的时间短。</p></li><li><p><strong>并发清除</strong>（<code>CMS concurrent sweep</code>）：清理删除掉标记阶段判断的已经死亡的对象，由于<strong>不需要移动存活对象</strong>，所以这个阶段也是<strong>可以与用户线程同时并发</strong>的。</p></li></ul><figure><img src="'+G+'" alt="Concurrent Mark Sweep收集器运行示意图" tabindex="0" loading="lazy"><figcaption>Concurrent Mark Sweep收集器运行示意图</figcaption></figure><p><strong>优点</strong>：并发收集、<strong>低停顿</strong></p><p><strong>缺点</strong>：</p><ol><li>CMS 收集器<strong>对处理器资源非常敏感</strong>，会因为占用了一部分线程，导致应用程序变慢。</li><li>CMS 收集器<strong>无法处理“浮动垃圾”</strong>，有可能出现“<code>Concurrent Mode Failure</code>”失败进而导致另一次完全“<code>Stop The World</code>”的 <code>Full GC</code> 的产生。</li><li>CMS 是一款基于“标记-清除”算法实现的收集器，会有大量<strong>空间碎片</strong>产生。</li></ol><h3 id="g1-收集器" tabindex="-1"><a class="header-anchor" href="#g1-收集器" aria-hidden="true">#</a> G1 收集器</h3><p>G1（<code>Garbage First</code>）是一款主要面向<strong>服务端</strong>应用的垃圾收集器。它是垃圾收集器技术发展史上里程碑式的成果，开创了收集器面向<strong>局部收集</strong>的设计思路和基于 <strong>Region</strong> 的内存布局形式。</p><p>JDK 9 发布之日，G1 宣告取代 <code>Parallel Scavenge</code> 加 <code>Parallel Old</code> 组合，成为服务端模式下的默认垃圾收集器，而 CMS 则被声明为不推荐使用（Deprecate）的收集器。</p><h4 id="g1-设计的目标-——-建立-停顿时间模型" tabindex="-1"><a class="header-anchor" href="#g1-设计的目标-——-建立-停顿时间模型" aria-hidden="true">#</a> G1 设计的目标 —— 建立“停顿时间模型”</h4><blockquote><p>停顿时间模型（<code>Pause Prediction Model</code>）的意思是能够支持指定在一个长度为 M 毫秒的时间片段内，消耗在垃圾收集上的时间大概率不超过 N 毫秒这样的目标。</p></blockquote><h4 id="g1-的设计思想" tabindex="-1"><a class="header-anchor" href="#g1-的设计思想" aria-hidden="true">#</a> G1 的设计思想</h4><p>G1 可以选择堆内存任何部分组成回收集（<code>Collection Set</code>， 一般简称 CSet），进行回收。哪块内存中存放的垃圾数量最多，回收收益最大，就优先回收哪块内存。这就是 G1 收集器的 <code>Mixed GC</code> 模式。</p><h4 id="g1-的具体实现" tabindex="-1"><a class="header-anchor" href="#g1-的具体实现" aria-hidden="true">#</a> G1 的具体实现</h4><p>G1 把连续的 Java 堆划分为<strong>多个大小相等的独立区域（Region），每一个 Region 都可以根据需要，扮演新生代的 Eden 空间、Survivor 空间，或者老年代空间</strong>。</p><p>Region 中还有一类特殊的 Humongous 区域，专门用来存储大对象。G1 认为只要大小超过了一个 <strong>Region 容量一半</strong>的对象即可判定为大对象。每个 Region 的大小可以通过参数 <code>-XX:G1HeapRegionSize</code> 设定，取值范围为 <strong>1MB ~ 32MB，且应为 2 的 N 次幂</strong>。而对于那些超过了整个 Region 容量的超级大对象，将会被存放在 N 个连续的 <code>Humongous Region</code> 之中，G1 的大多数行为都把 <code>Humongous Region</code> 作为老年代的一部分来进行看待。</p><figure><img src="'+C+'" alt="G1 收集器 Region 分区示意图" tabindex="0" loading="lazy"><figcaption>G1 收集器 Region 分区示意图</figcaption></figure><p>G1 收集器要怎么做才能满足用户的期望（<code>-XX:MaxGCPauseMillis</code>）呢？G1 收集器的停顿预测模型是以衰减均值（Decaying Average）为理论基础来实现的，在垃圾收集过程中，G1 收集器会记录每个 Region 的回收耗时、每个 Region 记忆集里的脏卡数量等各个可测量的步骤花费的成本，并分析得出平均值、标准偏差、置信度等统计信息。然后通过这些信息预测现在开始回收的话，由哪些 Region 组成回收集才可以在不超过期望停顿时间的约束下获得最高的收益。</p><div class="hint-container tip"><p class="hint-container-title">提示</p><p>这里强调的“衰减平均值”是指它会比普通的平均值更容易受到新数据的影响，平均值代表整体平均状态，但衰减平均值更准确地代表“<strong>最近的</strong>”平均状态。换句话说，<strong>Region 的统计状态越新越能决定其回收的价值</strong>。</p></div><p>G1 收集器的运作过程大致可划分为以下四个步骤：</p><ul><li><p><strong>初始标记</strong>（<code>Initial Marking</code>）：仅仅只是标记一下GC Roots能直接关联到的对象，并且修改 TAMS 指针的值，让下一阶段用户线程并发运行时，能正确地在可用的 Region 中分配新对象。这个阶段<strong>需要停顿线程（STW）</strong>，但耗时很短，而且是借用进行 <code>Minor GC</code> 的时候同步完成的，所以 G1 收集器在这个阶段实际并没有额外的停顿。</p></li><li><p><strong>并发标记</strong>（<code>Concurrent Marking</code>）：从GC Root开始对堆中对象进行可达性分析，递归扫描整个堆里的对象图，找出要回收的对象，这阶段耗时较长，但可<strong>与用户程序并发执行</strong>。当对象图扫描完成以后，还要重新处理 SATB 记录下的在并发时有引用变动的对象。</p></li><li><p><strong>最终标记</strong>（<code>Final Marking</code>）：对用户线程做另一个<strong>短暂的暂停（STW）</strong>，用于处理并发阶段结束后仍遗留下来的最后那少量的 SATB 记录。</p></li><li><p><strong>筛选回收</strong>（<code>Live Data Counting and Evacuation</code>）：负责更新 Region 的<strong>统计</strong>数据，对各个 Region 的回收价值和成本进行<strong>排序</strong>，根据用户所期望的停顿时间来制定<strong>回收计划</strong>，可以自由选择任意多个 Region 构成<strong>回收集</strong>，然后把决定回收的那一部分 Region 的存活对象<strong>复制</strong>到空的 Region 中，再<strong>清理</strong>掉整个旧 Region 的全部空间。这里的操作涉及存活对象的移动，是必须<strong>暂停用户线程（STW）</strong>，由<strong>多条收集器线程并行完成</strong>的。</p></li></ul><figure><img src="'+M+'" alt="G1 收集器运行示意图" tabindex="0" loading="lazy"><figcaption>G1 收集器运行示意图</figcaption></figure><div class="hint-container info"><p class="hint-container-title">MaxGCPauseMillis 怎样设置合理</p><p>如果我们把停顿时间调得非常低，就可能导致每次选出来的回收集只占堆内存很小的一部分，收集器<strong>收集的速度逐渐跟不上分配器分配的速度</strong>，导致垃圾慢慢堆积。应用运行一段时间后，最终占满堆，引发 <code>Full GC</code>，从而降低性能。所以通常把 MaxGCPauseMillis 设置为一两百毫秒或者两三百毫秒会是比较合理的。</p></div><h4 id="g1-的优点" tabindex="-1"><a class="header-anchor" href="#g1-的优点" aria-hidden="true">#</a> G1 的优点</h4><ul><li>可以通过 <code>-XX:MaxGCPauseMillis</code> 指定最大停顿时间，默认 200ms。</li><li>分 Region 的内存布局，和按收益动态确定回收集的创新设计。</li><li>运作期间<strong>不会产生内存空间碎片</strong>。</li></ul><h4 id="g1-的缺点" tabindex="-1"><a class="header-anchor" href="#g1-的缺点" aria-hidden="true">#</a> G1 的缺点</h4><p>内存消耗大，G1 至少要耗费大约相当于 Java 堆容量 10% 至 20% 的额外内存来维持收集器工作。</p><div class="hint-container info"><p class="hint-container-title">选择 CMS 还是 G1？</p><p>小内存应用上 CMS 的表现大概率仍然要会优于 G1，而在大内存应用上 G1 则大多能发挥其优势。</p></div><h4 id="关于-g1-的视频介绍" tabindex="-1"><a class="header-anchor" href="#关于-g1-的视频介绍" aria-hidden="true">#</a> 关于 G1 的视频介绍</h4>',33);function A(E,J){const o=t("RouterLink"),r=t("YouTube");return l(),c("div",null,[k,e("p",null,[P,a("："),R,a("，采用“"),n(o,{to:"/notes/jvm/chap-one.html#%E6%8C%87%E9%92%88%E7%A2%B0%E6%92%9E"},{default:g(()=>[a("指针碰撞")]),_:1}),a("”分配内存，实现简单，运行"),w,a("。")]),z,O,N,T,H,n(r,{id:"2PIBF92iOvQ"})])}const B=i(y,[["render",A],["__file","chap-two.html.vue"]]);export{B as default};
