const e=JSON.parse('{"key":"v-307eb891","path":"/notes/jvm/chap-two.html","title":"第二章 垃圾收集器与内存分配策略","lang":"zh-CN","frontmatter":{"title":"第二章 垃圾收集器与内存分配策略","order":2,"isOriginal":true,"category":["笔记"],"tag":["JVM"],"description":"判断对象是否存活 可达性分析算法 Java 是通过可达性分析算法来判定对象是否存活的。通过一系列称为 GC Roots 的根对象作为起始节点集，从这些节点开始，根据引用关系向下搜索，搜索过程所走过的路径称为“引用链”（Reference Chain），如果某个对象到 GC Roots 间没有任何引用链相连，则证明此对象是不可能再被使用的。 利用可达性分析算法判定对象是否可回收","head":[["meta",{"property":"og:url","content":"https://cpgege.gitee.io/notes/jvm/chap-two.html"}],["meta",{"property":"og:site_name","content":"BroNotes(学长笔记)"}],["meta",{"property":"og:title","content":"第二章 垃圾收集器与内存分配策略"}],["meta",{"property":"og:description","content":"判断对象是否存活 可达性分析算法 Java 是通过可达性分析算法来判定对象是否存活的。通过一系列称为 GC Roots 的根对象作为起始节点集，从这些节点开始，根据引用关系向下搜索，搜索过程所走过的路径称为“引用链”（Reference Chain），如果某个对象到 GC Roots 间没有任何引用链相连，则证明此对象是不可能再被使用的。 利用可达性分析算法判定对象是否可回收"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:image","content":"https://cpgege.gitee.io/"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2023-11-08T08:38:36.000Z"}],["meta",{"name":"twitter:card","content":"summary_large_image"}],["meta",{"name":"twitter:image:alt","content":"第二章 垃圾收集器与内存分配策略"}],["meta",{"property":"article:author","content":"piaolingluo"}],["meta",{"property":"article:tag","content":"JVM"}],["meta",{"property":"article:modified_time","content":"2023-11-08T08:38:36.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"第二章 垃圾收集器与内存分配策略\\",\\"image\\":[\\"https://cpgege.gitee.io/\\"],\\"dateModified\\":\\"2023-11-08T08:38:36.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"piaolingluo\\",\\"url\\":\\"\\"}]}"]]},"headers":[{"level":2,"title":"判断对象是否存活","slug":"判断对象是否存活","link":"#判断对象是否存活","children":[{"level":3,"title":"可达性分析算法","slug":"可达性分析算法","link":"#可达性分析算法","children":[]}]},{"level":2,"title":"分代收集理论","slug":"分代收集理论","link":"#分代收集理论","children":[{"level":3,"title":"分代假说","slug":"分代假说","link":"#分代假说","children":[]}]},{"level":2,"title":"垃圾收集算法","slug":"垃圾收集算法","link":"#垃圾收集算法","children":[{"level":3,"title":"标记-清除算法","slug":"标记-清除算法","link":"#标记-清除算法","children":[]},{"level":3,"title":"标记-复制算法","slug":"标记-复制算法","link":"#标记-复制算法","children":[]},{"level":3,"title":"复制算法的改良 — Appel 式回收","slug":"复制算法的改良-—-appel-式回收","link":"#复制算法的改良-—-appel-式回收","children":[]},{"level":3,"title":"标记-整理算法","slug":"标记-整理算法","link":"#标记-整理算法","children":[]}]},{"level":2,"title":"经典垃圾收集器","slug":"经典垃圾收集器","link":"#经典垃圾收集器","children":[{"level":3,"title":"Serial 收集器","slug":"serial-收集器","link":"#serial-收集器","children":[]},{"level":3,"title":"Serial Old 收集器","slug":"serial-old-收集器","link":"#serial-old-收集器","children":[]},{"level":3,"title":"ParNew 收集器","slug":"parnew-收集器","link":"#parnew-收集器","children":[]},{"level":3,"title":"Parallel Scavenge 收集器","slug":"parallel-scavenge-收集器","link":"#parallel-scavenge-收集器","children":[]},{"level":3,"title":"Parallel Old 收集器","slug":"parallel-old-收集器","link":"#parallel-old-收集器","children":[]},{"level":3,"title":"CMS 收集器","slug":"cms-收集器","link":"#cms-收集器","children":[]},{"level":3,"title":"G1 收集器","slug":"g1-收集器","link":"#g1-收集器","children":[]}]}],"git":{"createdTime":1696259843000,"updatedTime":1699432716000,"contributors":[{"name":"gechenpeng","email":"731269319@qq.com","commits":5}]},"readingTime":{"minutes":15.73,"words":4718},"filePathRelative":"notes/jvm/chap-two.md","localizedDate":"2023年10月2日","excerpt":"<h2> 判断对象是否存活</h2>\\n<h3> 可达性分析算法</h3>\\n<p><strong>Java 是通过可达性分析算法来判定对象是否存活的</strong>。通过一系列称为 <code>GC Roots</code> 的<strong>根对象</strong>作为起始节点集，从这些节点开始，根据引用关系向下搜索，搜索过程所走过的路径称为“引用链”（<code>Reference Chain</code>），<strong>如果某个对象到 <code>GC Roots</code> 间没有任何引用链相连，则证明此对象是不可能再被使用的</strong>。</p>\\n<figure><figcaption>利用可达性分析算法判定对象是否可回收</figcaption></figure>","autoDesc":true}');export{e as data};
