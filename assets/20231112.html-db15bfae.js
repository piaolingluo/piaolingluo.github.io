const n=JSON.parse('{"key":"v-3c68f4d4","path":"/essay/2023/20231112.html","title":"HashMap 源码分析","lang":"zh-CN","frontmatter":{"title":"HashMap 源码分析","isOriginal":true,"category":["随笔"],"tag":["Java 集合"],"comment":true,"description":"put 方法 HashMap put 方法流程图 public V put(K key, V value) { return putVal(hash(key), key, value, false, true); } final V putVal(int hash, K key, V value, boolean onlyIfAbsent, boolean evict) { Node&lt;K,V&gt;[] tab; Node&lt;K,V&gt; p; int n, i; if ((tab = table) == null || (n = tab.length) == 0) n = (tab = resize()).length; if ((p = tab[i = (n - 1) &amp; hash]) == null) tab[i] = newNode(hash, key, value, null); else { Node&lt;K,V&gt; e; K k; if (p.hash == hash &amp;&amp; ((k = p.key) == key || (key != null &amp;&amp; key.equals(k)))) e = p; else if (p instanceof TreeNode) e = ((TreeNode&lt;K,V&gt;)p).putTreeVal(this, tab, hash, key, value); else { for (int binCount = 0; ; ++binCount) { if ((e = p.next) == null) { p.next = newNode(hash, key, value, null); if (binCount &gt;= TREEIFY_THRESHOLD - 1) // -1 for 1st treeifyBin(tab, hash); break; } if (e.hash == hash &amp;&amp; ((k = e.key) == key || (key != null &amp;&amp; key.equals(k)))) break; p = e; } } if (e != null) { // existing mapping for key V oldValue = e.value; if (!onlyIfAbsent || oldValue == null) e.value = value; afterNodeAccess(e); return oldValue; } } ++modCount; if (++size &gt; threshold) resize(); afterNodeInsertion(evict); return null; }","head":[["meta",{"property":"og:url","content":"https://cpgege.gitee.io/essay/2023/20231112.html"}],["meta",{"property":"og:site_name","content":"BroNotes(学长笔记)"}],["meta",{"property":"og:title","content":"HashMap 源码分析"}],["meta",{"property":"og:description","content":"put 方法 HashMap put 方法流程图 public V put(K key, V value) { return putVal(hash(key), key, value, false, true); } final V putVal(int hash, K key, V value, boolean onlyIfAbsent, boolean evict) { Node&lt;K,V&gt;[] tab; Node&lt;K,V&gt; p; int n, i; if ((tab = table) == null || (n = tab.length) == 0) n = (tab = resize()).length; if ((p = tab[i = (n - 1) &amp; hash]) == null) tab[i] = newNode(hash, key, value, null); else { Node&lt;K,V&gt; e; K k; if (p.hash == hash &amp;&amp; ((k = p.key) == key || (key != null &amp;&amp; key.equals(k)))) e = p; else if (p instanceof TreeNode) e = ((TreeNode&lt;K,V&gt;)p).putTreeVal(this, tab, hash, key, value); else { for (int binCount = 0; ; ++binCount) { if ((e = p.next) == null) { p.next = newNode(hash, key, value, null); if (binCount &gt;= TREEIFY_THRESHOLD - 1) // -1 for 1st treeifyBin(tab, hash); break; } if (e.hash == hash &amp;&amp; ((k = e.key) == key || (key != null &amp;&amp; key.equals(k)))) break; p = e; } } if (e != null) { // existing mapping for key V oldValue = e.value; if (!onlyIfAbsent || oldValue == null) e.value = value; afterNodeAccess(e); return oldValue; } } ++modCount; if (++size &gt; threshold) resize(); afterNodeInsertion(evict); return null; }"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:image","content":"https://cpgege.gitee.io/"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2023-11-12T15:53:36.000Z"}],["meta",{"name":"twitter:card","content":"summary_large_image"}],["meta",{"name":"twitter:image:alt","content":"HashMap 源码分析"}],["meta",{"property":"article:author","content":"piaolingluo"}],["meta",{"property":"article:tag","content":"Java 集合"}],["meta",{"property":"article:modified_time","content":"2023-11-12T15:53:36.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"HashMap 源码分析\\",\\"image\\":[\\"https://cpgege.gitee.io/\\"],\\"dateModified\\":\\"2023-11-12T15:53:36.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"piaolingluo\\",\\"url\\":\\"\\"}]}"]]},"headers":[{"level":2,"title":"put 方法","slug":"put-方法","link":"#put-方法","children":[]}],"git":{"createdTime":1699804416000,"updatedTime":1699804416000,"contributors":[{"name":"gechenpeng","email":"731269319@qq.com","commits":1}]},"readingTime":{"minutes":0.69,"words":208},"filePathRelative":"essay/2023/20231112.md","localizedDate":"2023年11月12日","excerpt":"<h2> put 方法</h2>\\n<figure><figcaption>HashMap put 方法流程图</figcaption></figure>\\n<div class=\\"language-java line-numbers-mode\\" data-ext=\\"java\\"><pre class=\\"language-java\\"><code><span class=\\"token keyword\\">public</span> <span class=\\"token class-name\\">V</span> <span class=\\"token function\\">put</span><span class=\\"token punctuation\\">(</span><span class=\\"token class-name\\">K</span> key<span class=\\"token punctuation\\">,</span> <span class=\\"token class-name\\">V</span> value<span class=\\"token punctuation\\">)</span> <span class=\\"token punctuation\\">{</span>\\n    <span class=\\"token keyword\\">return</span> <span class=\\"token function\\">putVal</span><span class=\\"token punctuation\\">(</span><span class=\\"token function\\">hash</span><span class=\\"token punctuation\\">(</span>key<span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">,</span> key<span class=\\"token punctuation\\">,</span> value<span class=\\"token punctuation\\">,</span> <span class=\\"token boolean\\">false</span><span class=\\"token punctuation\\">,</span> <span class=\\"token boolean\\">true</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n<span class=\\"token punctuation\\">}</span>\\n\\n<span class=\\"token keyword\\">final</span> <span class=\\"token class-name\\">V</span> <span class=\\"token function\\">putVal</span><span class=\\"token punctuation\\">(</span><span class=\\"token keyword\\">int</span> hash<span class=\\"token punctuation\\">,</span> <span class=\\"token class-name\\">K</span> key<span class=\\"token punctuation\\">,</span> <span class=\\"token class-name\\">V</span> value<span class=\\"token punctuation\\">,</span> <span class=\\"token keyword\\">boolean</span> onlyIfAbsent<span class=\\"token punctuation\\">,</span>\\n                <span class=\\"token keyword\\">boolean</span> evict<span class=\\"token punctuation\\">)</span> <span class=\\"token punctuation\\">{</span>\\n    <span class=\\"token class-name\\">Node</span><span class=\\"token generics\\"><span class=\\"token punctuation\\">&lt;</span><span class=\\"token class-name\\">K</span><span class=\\"token punctuation\\">,</span><span class=\\"token class-name\\">V</span><span class=\\"token punctuation\\">&gt;</span></span><span class=\\"token punctuation\\">[</span><span class=\\"token punctuation\\">]</span> tab<span class=\\"token punctuation\\">;</span> <span class=\\"token class-name\\">Node</span><span class=\\"token generics\\"><span class=\\"token punctuation\\">&lt;</span><span class=\\"token class-name\\">K</span><span class=\\"token punctuation\\">,</span><span class=\\"token class-name\\">V</span><span class=\\"token punctuation\\">&gt;</span></span> p<span class=\\"token punctuation\\">;</span> <span class=\\"token keyword\\">int</span> n<span class=\\"token punctuation\\">,</span> i<span class=\\"token punctuation\\">;</span>\\n    <span class=\\"token keyword\\">if</span> <span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">(</span>tab <span class=\\"token operator\\">=</span> table<span class=\\"token punctuation\\">)</span> <span class=\\"token operator\\">==</span> <span class=\\"token keyword\\">null</span> <span class=\\"token operator\\">||</span> <span class=\\"token punctuation\\">(</span>n <span class=\\"token operator\\">=</span> tab<span class=\\"token punctuation\\">.</span>length<span class=\\"token punctuation\\">)</span> <span class=\\"token operator\\">==</span> <span class=\\"token number\\">0</span><span class=\\"token punctuation\\">)</span>\\n        n <span class=\\"token operator\\">=</span> <span class=\\"token punctuation\\">(</span>tab <span class=\\"token operator\\">=</span> <span class=\\"token function\\">resize</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">.</span>length<span class=\\"token punctuation\\">;</span>\\n    <span class=\\"token keyword\\">if</span> <span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">(</span>p <span class=\\"token operator\\">=</span> tab<span class=\\"token punctuation\\">[</span>i <span class=\\"token operator\\">=</span> <span class=\\"token punctuation\\">(</span>n <span class=\\"token operator\\">-</span> <span class=\\"token number\\">1</span><span class=\\"token punctuation\\">)</span> <span class=\\"token operator\\">&amp;</span> hash<span class=\\"token punctuation\\">]</span><span class=\\"token punctuation\\">)</span> <span class=\\"token operator\\">==</span> <span class=\\"token keyword\\">null</span><span class=\\"token punctuation\\">)</span>\\n        tab<span class=\\"token punctuation\\">[</span>i<span class=\\"token punctuation\\">]</span> <span class=\\"token operator\\">=</span> <span class=\\"token function\\">newNode</span><span class=\\"token punctuation\\">(</span>hash<span class=\\"token punctuation\\">,</span> key<span class=\\"token punctuation\\">,</span> value<span class=\\"token punctuation\\">,</span> <span class=\\"token keyword\\">null</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n    <span class=\\"token keyword\\">else</span> <span class=\\"token punctuation\\">{</span>\\n        <span class=\\"token class-name\\">Node</span><span class=\\"token generics\\"><span class=\\"token punctuation\\">&lt;</span><span class=\\"token class-name\\">K</span><span class=\\"token punctuation\\">,</span><span class=\\"token class-name\\">V</span><span class=\\"token punctuation\\">&gt;</span></span> e<span class=\\"token punctuation\\">;</span> <span class=\\"token class-name\\">K</span> k<span class=\\"token punctuation\\">;</span>\\n        <span class=\\"token keyword\\">if</span> <span class=\\"token punctuation\\">(</span>p<span class=\\"token punctuation\\">.</span>hash <span class=\\"token operator\\">==</span> hash <span class=\\"token operator\\">&amp;&amp;</span>\\n            <span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">(</span>k <span class=\\"token operator\\">=</span> p<span class=\\"token punctuation\\">.</span>key<span class=\\"token punctuation\\">)</span> <span class=\\"token operator\\">==</span> key <span class=\\"token operator\\">||</span> <span class=\\"token punctuation\\">(</span>key <span class=\\"token operator\\">!=</span> <span class=\\"token keyword\\">null</span> <span class=\\"token operator\\">&amp;&amp;</span> key<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">equals</span><span class=\\"token punctuation\\">(</span>k<span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">)</span>\\n            e <span class=\\"token operator\\">=</span> p<span class=\\"token punctuation\\">;</span>\\n        <span class=\\"token keyword\\">else</span> <span class=\\"token keyword\\">if</span> <span class=\\"token punctuation\\">(</span>p <span class=\\"token keyword\\">instanceof</span> <span class=\\"token class-name\\">TreeNode</span><span class=\\"token punctuation\\">)</span>\\n            e <span class=\\"token operator\\">=</span> <span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">(</span><span class=\\"token class-name\\">TreeNode</span><span class=\\"token generics\\"><span class=\\"token punctuation\\">&lt;</span><span class=\\"token class-name\\">K</span><span class=\\"token punctuation\\">,</span><span class=\\"token class-name\\">V</span><span class=\\"token punctuation\\">&gt;</span></span><span class=\\"token punctuation\\">)</span>p<span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">.</span><span class=\\"token function\\">putTreeVal</span><span class=\\"token punctuation\\">(</span><span class=\\"token keyword\\">this</span><span class=\\"token punctuation\\">,</span> tab<span class=\\"token punctuation\\">,</span> hash<span class=\\"token punctuation\\">,</span> key<span class=\\"token punctuation\\">,</span> value<span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n        <span class=\\"token keyword\\">else</span> <span class=\\"token punctuation\\">{</span>\\n            <span class=\\"token keyword\\">for</span> <span class=\\"token punctuation\\">(</span><span class=\\"token keyword\\">int</span> binCount <span class=\\"token operator\\">=</span> <span class=\\"token number\\">0</span><span class=\\"token punctuation\\">;</span> <span class=\\"token punctuation\\">;</span> <span class=\\"token operator\\">++</span>binCount<span class=\\"token punctuation\\">)</span> <span class=\\"token punctuation\\">{</span>\\n                <span class=\\"token keyword\\">if</span> <span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">(</span>e <span class=\\"token operator\\">=</span> p<span class=\\"token punctuation\\">.</span>next<span class=\\"token punctuation\\">)</span> <span class=\\"token operator\\">==</span> <span class=\\"token keyword\\">null</span><span class=\\"token punctuation\\">)</span> <span class=\\"token punctuation\\">{</span>\\n                    p<span class=\\"token punctuation\\">.</span>next <span class=\\"token operator\\">=</span> <span class=\\"token function\\">newNode</span><span class=\\"token punctuation\\">(</span>hash<span class=\\"token punctuation\\">,</span> key<span class=\\"token punctuation\\">,</span> value<span class=\\"token punctuation\\">,</span> <span class=\\"token keyword\\">null</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n                    <span class=\\"token keyword\\">if</span> <span class=\\"token punctuation\\">(</span>binCount <span class=\\"token operator\\">&gt;=</span> <span class=\\"token constant\\">TREEIFY_THRESHOLD</span> <span class=\\"token operator\\">-</span> <span class=\\"token number\\">1</span><span class=\\"token punctuation\\">)</span> <span class=\\"token comment\\">// -1 for 1st</span>\\n                        <span class=\\"token function\\">treeifyBin</span><span class=\\"token punctuation\\">(</span>tab<span class=\\"token punctuation\\">,</span> hash<span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n                    <span class=\\"token keyword\\">break</span><span class=\\"token punctuation\\">;</span>\\n                <span class=\\"token punctuation\\">}</span>\\n                <span class=\\"token keyword\\">if</span> <span class=\\"token punctuation\\">(</span>e<span class=\\"token punctuation\\">.</span>hash <span class=\\"token operator\\">==</span> hash <span class=\\"token operator\\">&amp;&amp;</span>\\n                    <span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">(</span>k <span class=\\"token operator\\">=</span> e<span class=\\"token punctuation\\">.</span>key<span class=\\"token punctuation\\">)</span> <span class=\\"token operator\\">==</span> key <span class=\\"token operator\\">||</span> <span class=\\"token punctuation\\">(</span>key <span class=\\"token operator\\">!=</span> <span class=\\"token keyword\\">null</span> <span class=\\"token operator\\">&amp;&amp;</span> key<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">equals</span><span class=\\"token punctuation\\">(</span>k<span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">)</span>\\n                    <span class=\\"token keyword\\">break</span><span class=\\"token punctuation\\">;</span>\\n                p <span class=\\"token operator\\">=</span> e<span class=\\"token punctuation\\">;</span>\\n            <span class=\\"token punctuation\\">}</span>\\n        <span class=\\"token punctuation\\">}</span>\\n        <span class=\\"token keyword\\">if</span> <span class=\\"token punctuation\\">(</span>e <span class=\\"token operator\\">!=</span> <span class=\\"token keyword\\">null</span><span class=\\"token punctuation\\">)</span> <span class=\\"token punctuation\\">{</span> <span class=\\"token comment\\">// existing mapping for key</span>\\n            <span class=\\"token class-name\\">V</span> oldValue <span class=\\"token operator\\">=</span> e<span class=\\"token punctuation\\">.</span>value<span class=\\"token punctuation\\">;</span>\\n            <span class=\\"token keyword\\">if</span> <span class=\\"token punctuation\\">(</span><span class=\\"token operator\\">!</span>onlyIfAbsent <span class=\\"token operator\\">||</span> oldValue <span class=\\"token operator\\">==</span> <span class=\\"token keyword\\">null</span><span class=\\"token punctuation\\">)</span>\\n                e<span class=\\"token punctuation\\">.</span>value <span class=\\"token operator\\">=</span> value<span class=\\"token punctuation\\">;</span>\\n            <span class=\\"token function\\">afterNodeAccess</span><span class=\\"token punctuation\\">(</span>e<span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n            <span class=\\"token keyword\\">return</span> oldValue<span class=\\"token punctuation\\">;</span>\\n        <span class=\\"token punctuation\\">}</span>\\n    <span class=\\"token punctuation\\">}</span>\\n    <span class=\\"token operator\\">++</span>modCount<span class=\\"token punctuation\\">;</span>\\n    <span class=\\"token keyword\\">if</span> <span class=\\"token punctuation\\">(</span><span class=\\"token operator\\">++</span>size <span class=\\"token operator\\">&gt;</span> threshold<span class=\\"token punctuation\\">)</span>\\n        <span class=\\"token function\\">resize</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n    <span class=\\"token function\\">afterNodeInsertion</span><span class=\\"token punctuation\\">(</span>evict<span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n    <span class=\\"token keyword\\">return</span> <span class=\\"token keyword\\">null</span><span class=\\"token punctuation\\">;</span>\\n<span class=\\"token punctuation\\">}</span>\\n</code></pre><div class=\\"line-numbers\\" aria-hidden=\\"true\\"><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div></div></div>","autoDesc":true}');export{n as data};
