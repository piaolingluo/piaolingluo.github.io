const e=JSON.parse('{"key":"v-3bf04cb7","path":"/notes/jvm/chap-one.html","title":"第一章 Java内存区域与内存溢出异常","lang":"zh-CN","frontmatter":{"title":"第一章 Java内存区域与内存溢出异常","order":1,"isOriginal":true,"category":["笔记"],"tag":["JVM"],"description":"对于 C/C++ 程序来说，开发人员需要手动分配和释放内存，如果使用不当，很可能发生内存泄露问题。 得益于 Java 虚拟机自动内存管理机制，Java 程序员不再需要为每一个 new 操作去写配对的 delete/free 代码，不容易出现内存泄漏和内存溢出问题。也正因为 Java 程序员把控制内存的权力交给了 Java 虚拟机，一旦出现内存泄漏和溢出方面的问题，如果不了解虚拟机是怎样使用内存的，那么排查错误、修正问题将会变得非常困难。 JVM 内存区域 Java 虚拟机在执行 Java 程序的过程中会把它所管理的内存划分为若干个不同的数据区域。","head":[["meta",{"property":"og:url","content":"https://cpgege.cn/notes/jvm/chap-one.html"}],["meta",{"property":"og:site_name","content":"BroNotes(学长笔记)"}],["meta",{"property":"og:title","content":"第一章 Java内存区域与内存溢出异常"}],["meta",{"property":"og:description","content":"对于 C/C++ 程序来说，开发人员需要手动分配和释放内存，如果使用不当，很可能发生内存泄露问题。 得益于 Java 虚拟机自动内存管理机制，Java 程序员不再需要为每一个 new 操作去写配对的 delete/free 代码，不容易出现内存泄漏和内存溢出问题。也正因为 Java 程序员把控制内存的权力交给了 Java 虚拟机，一旦出现内存泄漏和溢出方面的问题，如果不了解虚拟机是怎样使用内存的，那么排查错误、修正问题将会变得非常困难。 JVM 内存区域 Java 虚拟机在执行 Java 程序的过程中会把它所管理的内存划分为若干个不同的数据区域。"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:image","content":"https://cpgege.cn/"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2023-12-16T03:14:09.000Z"}],["meta",{"name":"twitter:card","content":"summary_large_image"}],["meta",{"name":"twitter:image:alt","content":"第一章 Java内存区域与内存溢出异常"}],["meta",{"property":"article:author","content":"piaolingluo"}],["meta",{"property":"article:tag","content":"JVM"}],["meta",{"property":"article:modified_time","content":"2023-12-16T03:14:09.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"第一章 Java内存区域与内存溢出异常\\",\\"image\\":[\\"https://cpgege.cn/\\"],\\"dateModified\\":\\"2023-12-16T03:14:09.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"piaolingluo\\",\\"url\\":\\"\\"}]}"]]},"headers":[{"level":2,"title":"JVM 内存区域","slug":"jvm-内存区域","link":"#jvm-内存区域","children":[{"level":3,"title":"程序计数器","slug":"程序计数器","link":"#程序计数器","children":[]},{"level":3,"title":"Java 虚拟机栈","slug":"java-虚拟机栈","link":"#java-虚拟机栈","children":[]},{"level":3,"title":"本地方法栈","slug":"本地方法栈","link":"#本地方法栈","children":[]},{"level":3,"title":"Java 堆","slug":"java-堆","link":"#java-堆","children":[]},{"level":3,"title":"方法区","slug":"方法区","link":"#方法区","children":[]},{"level":3,"title":"运行时常量池","slug":"运行时常量池","link":"#运行时常量池","children":[]},{"level":3,"title":"直接内存","slug":"直接内存","link":"#直接内存","children":[]}]},{"level":2,"title":"对象的创建","slug":"对象的创建","link":"#对象的创建","children":[]},{"level":2,"title":"对象内存分配方式","slug":"对象内存分配方式","link":"#对象内存分配方式","children":[{"level":3,"title":"指针碰撞","slug":"指针碰撞","link":"#指针碰撞","children":[]},{"level":3,"title":"空闲列表","slug":"空闲列表","link":"#空闲列表","children":[]}]},{"level":2,"title":"对象的内存布局","slug":"对象的内存布局","link":"#对象的内存布局","children":[{"level":3,"title":"对象头","slug":"对象头","link":"#对象头","children":[]},{"level":3,"title":"实例数据","slug":"实例数据","link":"#实例数据","children":[]},{"level":3,"title":"对齐填充","slug":"对齐填充","link":"#对齐填充","children":[]}]},{"level":2,"title":"对象的访问定位","slug":"对象的访问定位","link":"#对象的访问定位","children":[{"level":3,"title":"句柄访问","slug":"句柄访问","link":"#句柄访问","children":[]},{"level":3,"title":"直接指针访问","slug":"直接指针访问","link":"#直接指针访问","children":[]}]},{"level":2,"title":"JVM 内存区域 OOM 异常情况","slug":"jvm-内存区域-oom-异常情况","link":"#jvm-内存区域-oom-异常情况","children":[{"level":3,"title":"Java 堆溢出","slug":"java-堆溢出","link":"#java-堆溢出","children":[]},{"level":3,"title":"虚拟机栈和本地方法栈溢出","slug":"虚拟机栈和本地方法栈溢出","link":"#虚拟机栈和本地方法栈溢出","children":[]},{"level":3,"title":"方法区和运行时常量池溢出","slug":"方法区和运行时常量池溢出","link":"#方法区和运行时常量池溢出","children":[]},{"level":3,"title":"本机直接内存溢出","slug":"本机直接内存溢出","link":"#本机直接内存溢出","children":[]}]}],"git":{"createdTime":1696002560000,"updatedTime":1702696449000,"contributors":[{"name":"gechenpeng","email":"731269319@qq.com","commits":7}]},"readingTime":{"minutes":14.25,"words":4275},"filePathRelative":"notes/jvm/chap-one.md","localizedDate":"2023年9月29日","excerpt":"<p>对于 C/C++ 程序来说，开发人员需要手动分配和释放内存，如果使用不当，很可能发生内存泄露问题。</p>\\n<p>得益于 Java 虚拟机自动内存管理机制，Java 程序员不再需要为每一个 new 操作去写配对的 delete/free 代码，不容易出现内存泄漏和内存溢出问题。也正因为 Java 程序员把控制内存的权力交给了 Java 虚拟机，一旦出现内存泄漏和溢出方面的问题，如果不了解虚拟机是怎样使用内存的，那么排查错误、修正问题将会变得非常困难。</p>\\n<h2> JVM 内存区域</h2>\\n<p>Java 虚拟机在执行 Java 程序的过程中会把它所管理的内存划分为若干个不同的数据区域。</p>","autoDesc":true}');export{e as data};
