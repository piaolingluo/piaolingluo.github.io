const e=JSON.parse('{"key":"v-9d5e812e","path":"/notes/concurrent/chap-zero.html","title":"第零章 Java 并发机制的底层实现原理","lang":"zh-CN","frontmatter":{"title":"第零章 Java 并发机制的底层实现原理","order":1,"isOriginal":true,"category":["笔记"],"tag":["并发编程"],"index":false,"description":"在多线程并发编程中，volatile [/ˈvɒlətaɪl/] 和 synchronized 扮演着重要的角色。在多核处理器中，volatile 保证了共享变量的可见性，当一个线程修改共享变量时，另一个线程能够立即读取到修改后的值。在了解其实现原理之前，我们有必要了解一下 CPU 缓存相关知识。 物理内存与 CPU 缓存 CPU 在执行过程中，可以通过访存指令向物理内存中写入数据或者从其中读取数据。CPU 使用物理内存的方式很简单：通过总线向物理内存发送一个读写请求，其中包括目标地址（若是写请求，则还包括写入值），物理内存在收到请求后进行读写操作（若是读请求，则将读取值发送回 CPU）。因此从 CPU 的角度，可以把物理内存看作由字节组成的大数组：其中每一个字节拥有一个地址（物理地址），CPU 可以在这个数组中存取数据。","head":[["meta",{"property":"og:url","content":"https://cpgege.gitee.io/notes/concurrent/chap-zero.html"}],["meta",{"property":"og:site_name","content":"BroNotes(学长笔记)"}],["meta",{"property":"og:title","content":"第零章 Java 并发机制的底层实现原理"}],["meta",{"property":"og:description","content":"在多线程并发编程中，volatile [/ˈvɒlətaɪl/] 和 synchronized 扮演着重要的角色。在多核处理器中，volatile 保证了共享变量的可见性，当一个线程修改共享变量时，另一个线程能够立即读取到修改后的值。在了解其实现原理之前，我们有必要了解一下 CPU 缓存相关知识。 物理内存与 CPU 缓存 CPU 在执行过程中，可以通过访存指令向物理内存中写入数据或者从其中读取数据。CPU 使用物理内存的方式很简单：通过总线向物理内存发送一个读写请求，其中包括目标地址（若是写请求，则还包括写入值），物理内存在收到请求后进行读写操作（若是读请求，则将读取值发送回 CPU）。因此从 CPU 的角度，可以把物理内存看作由字节组成的大数组：其中每一个字节拥有一个地址（物理地址），CPU 可以在这个数组中存取数据。"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:image","content":"https://cpgege.gitee.io/"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-01-17T01:10:53.000Z"}],["meta",{"name":"twitter:card","content":"summary_large_image"}],["meta",{"name":"twitter:image:alt","content":"第零章 Java 并发机制的底层实现原理"}],["meta",{"property":"article:author","content":"piaolingluo"}],["meta",{"property":"article:tag","content":"并发编程"}],["meta",{"property":"article:modified_time","content":"2024-01-17T01:10:53.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"第零章 Java 并发机制的底层实现原理\\",\\"image\\":[\\"https://cpgege.gitee.io/\\"],\\"dateModified\\":\\"2024-01-17T01:10:53.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"piaolingluo\\",\\"url\\":\\"\\"}]}"]]},"headers":[{"level":2,"title":"物理内存与 CPU 缓存","slug":"物理内存与-cpu-缓存","link":"#物理内存与-cpu-缓存","children":[{"level":3,"title":"缓存结构","slug":"缓存结构","link":"#缓存结构","children":[]}]},{"level":2,"title":"volatile 的实现原理","slug":"volatile-的实现原理","link":"#volatile-的实现原理","children":[]}],"git":{"createdTime":1705453853000,"updatedTime":1705453853000,"contributors":[{"name":"gechenpeng","email":"731269319@qq.com","commits":1}]},"readingTime":{"minutes":3.17,"words":952},"filePathRelative":"notes/concurrent/chap-zero.md","localizedDate":"2024年1月17日","excerpt":"<p>在多线程并发编程中，volatile [/ˈvɒlətaɪl/] 和 synchronized 扮演着重要的角色。在多核处理器中，volatile 保证了共享变量的<strong>可见性</strong>，当一个线程修改共享变量时，另一个线程能够立即读取到修改后的值。在了解其实现原理之前，我们有必要了解一下 CPU 缓存相关知识。</p>\\n<h2> 物理内存与 CPU 缓存</h2>\\n<p>CPU 在执行过程中，可以通过<strong>访存指令</strong>向物理内存中写入数据或者从其中读取数据。CPU 使用物理内存的方式很简单：通过总线向物理内存发送一个读写请求，其中包括<strong>目标地址</strong>（若是写请求，则还包括写入值），物理内存在收到请求后进行读写操作（若是读请求，则将读取值发送回 CPU）。因此从 CPU 的角度，可以把物理内存看作由字节组成的大数组：其中每一个字节拥有一个地址（物理地址），CPU 可以在这个数组中存取数据。</p>","autoDesc":true}');export{e as data};
